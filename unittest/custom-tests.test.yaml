#
# mdn-bcd-collector: unittest/unit/bcd.test.js
# Unittest helper containing pseudo custom tests
#
# Â© Gooborg Studios
# See the LICENSE file for copyright details
#

__resources:
  audio-blip:
    type: audio
    src:
      - /media/blip.mp3
      - /media/blip.ogg
  image-black:
    type: image
    src: /media/black.png
    alt: A blank image
  webGL:
    type: instance
    src: |-
      var canvas = document.createElement('canvas');
      if (!canvas) {
        return false;
      };
      return canvas.getContext('webgl2') || canvas.getContext('webgl') || canvas.getContext('experimental-webgl');

api:
  foo:
    __base: var instance = 1;
    __test: return instance + 4;
    bar: return 1 + 1;
    __additional:
      multiple: return 1 + 1 + 1;
    one:
      __additional:
        only: return 1;
  import1:
    __base: |-
      <%api.foo:a%>
      var instance = a;
  import2:
    __base: |-
      <%api.import1:b%>
      var instance = b;
  straightimport:
    __base: <%api.foo:instance%>
  badimport:
    __base: <%api.foobar:apple%>
  badimport2:
    __base: <%api.foobar.bar:apple%>
  syntaxerror:
    __base: 2fast + 4you = !saanic;
  fig:
    __test: return 2;
  apple:
    __base: var a = 1;
    bar: return a + 3;
  invalid:
    __base: var a = await func);
  promise:
    __base: var promise = somePromise();
  newpromise:
    __base: |-
      <%api.promise:p%>
      var promise = p.then(function() {});
  callback:
    __base: |-
      function onsuccess(res) {
        callback(res.result);
      }
  newcallback:
    __base: |-
      <%api.callback:c%>
      function c(result) {
        callback(result);
      }
  audiocontext:
    __resources:
      - audio-blip
    __test: return false;
  badresource:
    __resources:
      - bad-resource
    __test: return false;
  WebGLRenderingContext:
    __resources:
      - webGL
    __base: var instance = reusableInstances.webGL;
  ANGLE_instanced_arrays:
    __base: |-
      var canvas = document.createElement('canvas');
      var gl = canvas.getContext('webgl');
      var instance = gl.getExtension('ANGLE_instanced_arrays');
    __test: return !!instance;
    drawArraysInstancedANGLE: return true && instance && 'drawArraysInstancedANGLE' in instance;
  Scope:
    __base: var scope = Scope;
    __test: return !!scope;
    specialWorklet: return scope && 'specialWorklet' in scope;
  Document:
    characterSet: return document.characterSet == "UTF-8";
    loaded:
      __additional:
        loaded_is_boolean: return typeof document.loaded === "boolean";
  FooBar:
    __base: "'hello world';"
    __test: return 'hello world!';
    foo: return 'hi, world!';
    bar:
      __base: "'goodbye world';"
      __test: return 'farewell world!';
      __additional:
        cinnamon: return 'snickerdoodle';
  createImageBitmap:
    __resources:
      - image-black
    __base: |-
      if (!('createImageBitmap' in self)) {
        return {result: false, message: 'createImageBitmap is not defined'};
      }
      function create(options) {
        return createImageBitmap(document.getElementById('resource-image-black'), options);
      }
    __test: return true;
    __additional:
      options_colorSpaceConversion_parameter: return bcd.testOptionParam(create, null, 'colorSpaceConversion', 'default');
css:
  properties:
    foo: return 1;
    bar: <%css.properties.foo:a%>

javascript:
  builtins:
    AsyncFunction:
      __base: |-
        try {
          async function a(){
            return true;
          };
        } catch(e) {
          if (e instanceof TypeError) {
            return {result: false, message: e.message};
          }
        }

        var instance = a();
      __test: return instance instanceof Promise;
    Function:
      name: |-
        function doTheThing() {};
        return doTheThing.name == 'doTheThing';
