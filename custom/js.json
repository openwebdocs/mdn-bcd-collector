{
  "builtins": {
    "AggregateError": {
      "members": {
        "instance": ["errors"]
      }
    },
    "Array": {
      "members": {
        "static": ["fromAsync"],
        "instance": ["group", "groupToMap", "length"]
      }
    },
    "ArrayBuffer": {
      "members": {
        "instance": [
          "detached",
          "transfer",
          "transferToFixed",
          "transferToFixedLength"
        ]
      }
    },
    "AsyncDisposableStack": {
      "__comment": "Remove when https://arai-a.github.io/ecma262-compare/?pr=3000 is merged into the main ECMAScript spec.",
      "ctor": {},
      "members": {
        "instance": [
          "adopt",
          "defer",
          "disposeAsync",
          "disposed",
          "move",
          "use",
          "@@asyncDispose"
        ]
      }
    },
    "AsyncIterator": {
      "__comment": "Remove when https://arai-a.github.io/ecma262-compare/?pr=3000 is merged into the main ECMAScript spec.",
      "ctor": {},
      "members": {
        "instance": ["@@asyncDispose"]
      }
    },
    "Atomics": {
      "members": {
        "static": ["pause"]
      }
    },
    "DataView": {
      "__comment": "Remove instance members when https://tc39.es/proposal-float16array is merged into the main ECMAScript spec.",
      "members": {
        "instance": ["getFloat16", "setFloat16"]
      }
    },
    "Date": {
      "members": {
        "instance": ["toTemporalInstant"]
      }
    },
    "DisposableStack": {
      "__comment": "Remove when https://arai-a.github.io/ecma262-compare/?pr=3000 is merged into the main ECMAScript spec.",
      "ctor": {},
      "members": {
        "instance": [
          "adopt",
          "defer",
          "dispose",
          "disposed",
          "move",
          "use",
          "@@dispose"
        ]
      }
    },
    "Error": {
      "members": {
        "instance": [
          "cause",
          "columnNumber",
          "fileName",
          "lineNumber",
          "message",
          "name",
          "stack"
        ],
        "static": ["captureStackTrace", "isError", "stackTraceLimit"]
      }
    },
    "Float16Array": {
      "__comment": "Remove when https://tc39.es/proposal-float16array is merged into the main ECMAScript spec.",
      "ctor": {}
    },
    "Function": {
      "members": {"instance": ["arguments", "caller", "length"]}
    },
    "InternalError": {
      "ctor": {}
    },
    "Math": {
      "__comment": "Remove when https://tc39.es/proposal-float16array and/or https://github.com/tc39/proposal-math-sum are merged into the main ECMAScript spec.",
      "members": {
        "static": ["f16round", "sumPrecise"]
      }
    },
    "Promise": {
      "__comment": "Remove when https://tc39.es/proposal-promise-try and https://tc39.es/proposal-promise-with-resolvers/#sec-promise.withResolvers are merged into the main ECMAScript spec.",
      "members": {
        "static": ["try", "withResolvers"]
      }
    },
    "RegExp": {
      "members": {
        "static": [
          "escape",
          "input",
          "lastIndex",
          "lastMatch",
          "lastParen",
          "leftContext",
          "rightContext"
        ],
        "instance": ["n"]
      }
    },
    "String": {
      "members": {"instance": ["contains", "length"]}
    },
    "SuppressedError": {
      "__comment": "Remove when https://arai-a.github.io/ecma262-compare/?pr=3000 is merged into the main ECMAScript spec.",
      "ctor": {},
      "members": {"instance": ["error", "suppressed"]}
    },
    "Symbol": {
      "members": {"static": ["asyncDispose", "dispose"]}
    },
    "Uint8Array": {
      "__comment": "Remove members when https://tc39.es/proposal-arraybuffer-base64/spec/ is merged into the main ECMAScript spec.",
      "members": {
        "instance": ["toBase64", "toHex", "setFromBase64", "setFromHex"],
        "static": ["fromBase64", "fromHex"]
      }
    },
    "Intl": {
      "__comment": "XXX Intl is defined in another specification that the es-scraper does not load data from.",
      "members": {
        "static": ["getCanonicalLocales", "supportedValuesOf"]
      }
    },
    "Intl.Collator": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["compare", "resolvedOptions"]
      }
    },
    "Intl.DateTimeFormat": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": [
          "format",
          "formatRange",
          "formatRangeToParts",
          "formatToParts",
          "resolvedOptions"
        ]
      }
    },
    "Intl.DisplayNames": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["of", "resolvedOptions"]
      }
    },
    "Intl.DurationFormat": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["format", "formatToParts", "resolvedOptions"]
      }
    },
    "Intl.ListFormat": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["format", "formatToParts", "resolvedOptions"]
      }
    },
    "Intl.Locale": {
      "ctor": {},
      "members": {
        "instance": [
          "baseName",
          "calendar",
          "caseFirst",
          "collation",
          "getCalendars",
          "getCollations",
          "getHourCycles",
          "getNumberingSystems",
          "getTextInfo",
          "getTimeZones",
          "getWeekInfo",
          "hourCycle",
          "language",
          "maximize",
          "minimize",
          "numberingSystem",
          "numeric",
          "region",
          "script",
          "toString"
        ]
      }
    },
    "Intl.NumberFormat": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": [
          "format",
          "formatRange",
          "formatRangeToParts",
          "formatToParts",
          "resolvedOptions"
        ]
      }
    },
    "Intl.PluralRules": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["resolvedOptions", "select", "selectRange"]
      }
    },
    "Intl.RelativeTimeFormat": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["format", "formatToParts", "resolvedOptions"]
      }
    },
    "Intl.Segmenter": {
      "ctor": {},
      "members": {
        "static": ["supportedLocalesOf"],
        "instance": ["resolvedOptions", "segment"]
      }
    },
    "Intl.Segments": {
      "members": {
        "instance": ["containing", "@@iterator"]
      }
    },
    "Iterator": {
      "ctor": {},
      "members": {
        "static": ["from"],
        "instance": [
          "drop",
          "every",
          "filter",
          "find",
          "flatMap",
          "forEach",
          "map",
          "reduce",
          "some",
          "take",
          "toArray",
          "@@dispose"
        ]
      }
    },
    "Set": {
      "members": {
        "instance": [
          "difference",
          "intersection",
          "isDisjointFrom",
          "isSubsetOf",
          "isSupersetOf",
          "symmetricDifference",
          "union"
        ]
      }
    },

    "Temporal": {
      "__comment": "XXX Temporal is still in draft stages, so the es-scraper will not include its data."
    },
    "Temporal.Duration": {
      "ctor": {},
      "members": {
        "static": ["compare", "from"],
        "instance": [
          "abs",
          "add",
          "blank",
          "days",
          "hours",
          "microseconds",
          "milliseconds",
          "minutes",
          "months",
          "nanoseconds",
          "negated",
          "round",
          "seconds",
          "sign",
          "subtract",
          "toJSON",
          "toLocaleString",
          "toString",
          "total",
          "valueOf",
          "weeks",
          "with",
          "years"
        ]
      }
    },
    "Temporal.Instant": {
      "ctor": {},
      "members": {
        "static": [
          "compare",
          "from",
          "fromEpochMilliseconds",
          "fromEpochNanoseconds"
        ],
        "instance": [
          "add",
          "epochMilliseconds",
          "epochNanoseconds",
          "equals",
          "round",
          "since",
          "subtract",
          "toJSON",
          "toLocaleString",
          "toString",
          "toZonedDateTimeISO",
          "until",
          "valueOf"
        ]
      }
    },
    "Temporal.Now": {
      "members": {
        "static": [
          "instant",
          "plainDateISO",
          "plainDateTimeISO",
          "plainTimeISO",
          "timeZoneId",
          "zonedDateTimeISO"
        ]
      }
    },
    "Temporal.PlainDate": {
      "ctor": {},
      "members": {
        "static": ["compare", "from"],
        "instance": [
          "add",
          "calendarId",
          "day",
          "dayOfWeek",
          "dayOfYear",
          "daysInMonth",
          "daysInWeek",
          "daysInYear",
          "equals",
          "era",
          "eraYear",
          "inLeapYear",
          "month",
          "monthCode",
          "monthsInYear",
          "since",
          "subtract",
          "toJSON",
          "toLocaleString",
          "toPlainDateTime",
          "toPlainMonthDay",
          "toPlainYearMonth",
          "toString",
          "toZonedDateTime",
          "until",
          "valueOf",
          "weekOfYear",
          "with",
          "withCalendar",
          "year",
          "yearOfWeek"
        ]
      }
    },
    "Temporal.PlainDateTime": {
      "ctor": {},
      "members": {
        "static": ["compare", "from"],
        "instance": [
          "add",
          "calendarId",
          "day",
          "dayOfWeek",
          "dayOfYear",
          "daysInMonth",
          "daysInWeek",
          "daysInYear",
          "equals",
          "era",
          "eraYear",
          "hour",
          "inLeapYear",
          "microsecond",
          "millisecond",
          "minute",
          "month",
          "monthCode",
          "monthsInYear",
          "nanosecond",
          "round",
          "second",
          "since",
          "subtract",
          "toJSON",
          "toLocaleString",
          "toPlainDate",
          "toPlainTime",
          "toString",
          "toZonedDateTime",
          "until",
          "valueOf",
          "weekOfYear",
          "with",
          "withCalendar",
          "withPlainTime",
          "year",
          "yearOfWeek"
        ]
      }
    },
    "Temporal.PlainMonthDay": {
      "ctor": {},
      "members": {
        "static": ["from"],
        "instance": [
          "calendarId",
          "day",
          "equals",
          "getISOFields",
          "monthCode",
          "toJSON",
          "toLocaleString",
          "toPlainDate",
          "toString",
          "valueOf",
          "with"
        ]
      }
    },
    "Temporal.PlainTime": {
      "ctor": {},
      "members": {
        "static": ["compare", "from"],
        "instance": [
          "add",
          "equals",
          "hour",
          "microsecond",
          "millisecond",
          "minute",
          "nanosecond",
          "round",
          "second",
          "since",
          "subtract",
          "toJSON",
          "toLocaleString",
          "toString",
          "until",
          "valueOf",
          "with"
        ]
      }
    },
    "Temporal.PlainYearMonth": {
      "ctor": {},
      "members": {
        "static": ["compare", "from"],
        "instance": [
          "add",
          "calendarId",
          "daysInMonth",
          "daysInYear",
          "equals",
          "era",
          "eraYear",
          "inLeapYear",
          "month",
          "monthCode",
          "monthsInYear",
          "since",
          "subtract",
          "toJSON",
          "toLocaleString",
          "toPlainDate",
          "toString",
          "until",
          "valueOf",
          "with",
          "year"
        ]
      }
    },
    "Temporal.ZonedDateTime": {
      "ctor": {},
      "members": {
        "static": ["compare", "from"],
        "instance": [
          "add",
          "calendarId",
          "day",
          "dayOfWeek",
          "dayOfYear",
          "daysInMonth",
          "daysInWeek",
          "daysInYear",
          "epochMilliseconds",
          "epochNanoseconds",
          "equals",
          "era",
          "eraYear",
          "getTimeZoneTransition",
          "hour",
          "hoursInDay",
          "inLeapYear",
          "microsecond",
          "millisecond",
          "minute",
          "month",
          "monthCode",
          "monthsInYear",
          "nanosecond",
          "offset",
          "offsetNanoseconds",
          "round",
          "second",
          "since",
          "startOfDay",
          "subtract",
          "timeZoneId",
          "toInstant",
          "toJSON",
          "toLocaleString",
          "toPlainDate",
          "toPlainDateTime",
          "toPlainTime",
          "toString",
          "until",
          "valueOf",
          "weekOfYear",
          "with",
          "withCalendar",
          "withPlainTime",
          "withTimeZone",
          "year",
          "yearOfWeek"
        ]
      }
    }
  },
  "classes": {
    "__base": "class Foo {}",
    "constructor": "class Foo { constructor() {} }",
    "extends": "class Foo extends Object {}",
    "static": "class Foo { static method() {} }",
    "private_class_fields": "class Foo { #field = 1; }",
    "private_class_fields_in": "class Foo { #field; hasField(obj) { return #field in obj; } }",
    "private_class_methods": "class Foo { #method() {} }",
    "public_class_fields": "class Foo { field = 1; }",
    "static.class_fields": "class Foo { static field = 1; }",
    "static.initialization_blocks": "class Foo { static { this.x = 1; } }"
  },
  "functions": {
    "__base": "(function() {})()",
    "arrow_functions": "() => {}",
    "default_parameters": "function foo(x = 1) {}",
    "rest_parameters": "function foo(...args) {}",
    "method_definitions": "const obj = { method() {} }",
    "get": "const obj = { get prop() { return 1; } }",
    "set": "const obj = { set prop(val) {} }",
    "arguments": "function foo() {\n  if (typeof arguments !== 'object') throw new Error('Unsupported');\n  }\n  foo();",
    "block_level_functions": "if (true) {\nfunction foo() {\nreturn 1;\n}\n}",
    "arguments.@@iterator": "function foo() {\nif (typeof arguments[Symbol.iterator] !== 'function') throw new Error('Unsupported');\n}\nfoo(1, 2, 3);",
    "arguments.callee": "function foo() {\nif (typeof arguments.callee !== 'function') throw new Error('Unsupported');\n}\nfoo();",
    "arguments.length": "function foo() {\nif (arguments.length !== 3) throw new Error('Unsupported');\n}\nfoo(1, 2, 3);",
    "arrow_functions.trailing_comma": "(a,) => {}",
    "default_parameters.destructured_parameter_with_default_value_assignment": "function foo({x = 1} = {}) {}",
    "default_parameters.parameters_without_defaults_after_default_parameters": "function foo(x = 1, y) {}",
    "get.computed_property_names": "const prop = 'x'; const obj = { get [prop]() { return 1; } }",
    "set.computed_property_names": "const prop = 'x'; const obj = { set [prop](val) {} }",
    "method_definitions.async_generator_methods": "const obj = { async *method() { yield 1; } }",
    "method_definitions.async_methods": "const obj = { async method() {} }",
    "javascript.functions.method_definitions.generator_methods_not_constructable": "const obj = {\n*method() {\nyield 1;\n},\n};\ntry {\nnew obj.method();\nthrow new Error('Unsupported - generator methods should not be constructable');\n} catch (e) {\nif (e.message === 'Unsupported - generator methods should not be constructable') {\nthrow e;\n}\n}",
    "javascript.functions.rest_parameters.destructuring": "function foo(...[a, b]) {}"
  },
  "grammar": {
    "array_literals": "var x = [1, 2, 3];",
    "binary_numeric_literals": "var x = 0b0001;",
    "boolean_literals": "var x = true;",
    "decimal_numeric_literals": "var x = 1;",
    "hexadecimal_escape_sequences": "var x = '\\xA9';",
    "hexadecimal_numeric_literals": "var x = 0xAF;",
    "null_literal": "var x = null;",
    "numeric_separators": "var x = 1_000_000_000_000;",
    "octal_numeric_literals": "var x = 0o755;",
    "regular_expression_literals": "var x = /ab+c/g;",
    "shorthand_object_literals": "const a = 1; const obj = {a}",
    "string_literals": "var x = 'foo';",
    "template_literals": "const x = `hello ${1}`",
    "template_literals.template_literal_revision": "function tag(strings) { return strings.raw[0]; } tag`\\unicode`",
    "trailing_commas": "[1, 2,]",
    "trailing_commas.trailing_commas_in_functions": "function foo(a,) {}",
    "trailing_commas.trailing_commas_in_object_literals": "const obj = {a: 1,}",
    "unicode_escape_sequences": "var x = '\\u00A9';",
    "unicode_point_escapes": "var x = '\\u{2F804}';"
  },
  "operators": {
    "addition": "var x = 1 + 1;",
    "addition_assignment": "var x = 1;\nx += 2;",
    "assignment": "var x = 1;",
    "async_function": "async function foo() {};",
    "async_generator_function": "async function* foo() {};",
    "await": "async function foo() {\n  await foo();\n};",
    "bitwise_and": "var x = 5 & 3;",
    "bitwise_and_assignment": "var x = 5;\nx &= 3;",
    "bitwise_not": "var x = 5;\n~x;",
    "bitwise_or": "var x = 5 | 3;",
    "bitwise_or_assignment": "var x = 5;\nx |= 3;",
    "bitwise_xor": "var x = 5 ^ 3;",
    "bitwise_xor_assignment": "var x = 5;\nx ^= 3;",
    "class": "const Rectangle = class {};",
    "comma": "var x = (1, 2, 3);",
    "conditional": "true ? 1 : 2;",
    "decrement": "var x = 1;\nx--;",
    "delete": "var obj = {'foo': 'bar'};\ndelete obj.foo;",
    "destructuring": "var a, b;\n[a, b] = [10, 20];",
    "destructuring.computed_property_names": "const key = 'foo'; const {[key]: value} = {foo: 'bar'}",
    "destructuring.rest_in_arrays": "const [a, ...rest] = [1, 2, 3]",
    "destructuring.rest_in_objects": "const {a, ...rest} = {a: 1, b: 2}",
    "division": "var x = 4 / 2;",
    "division_assignment": "var x = 4;\n x /= 2;",
    "equality": "1 == true;",
    "exponentiation": "var x = 4 ** 2;",
    "exponentiation_assignment": "var x = 4;\n x **= 2;",
    "function": "function foo() {};",
    "function.trailing_comma": "function f(a,) {}",
    "generator_function": "function* foo() {};",
    "generator_function.trailing_comma": "function* gen(a,) {}",
    "greater_than": "3 > 1;",
    "greater_than_or_equal": "3 >= 1;",
    "grouping": "(1 + 2) * 3;",
    "in": "'foo' in ['foo', 'bar'];",
    "increment": "var x = 1;\nx++;",
    "inequality": "1 != false;",
    "instanceof": "(new Object()) instanceof Object;",
    "left_shift": "var x = 5 << 2;",
    "left_shift_assignment": "var x = 5;\n x <<= 2;",
    "less_than": "1 < 3;",
    "less_than_or_equal": "1 <= 3;",
    "logical_and": "true && 1;",
    "logical_and_assignment": "var x = 1;\nx &&= 2;",
    "logical_not": "var x = !false;",
    "logical_or": "false || 1;",
    "logical_or_assignment": "var x = 0;\nx ||= 2;",
    "multiplication": "var x = 4 * 2;",
    "multiplication_assignment": "var x = 4;\n x *= 2;",
    "new": "new Object();",
    "new_target": "function Foo() { new.target; }",
    "null": "var x = null;",
    "nullish_coalescing": "var x = null ?? 'foo';",
    "nullish_coalescing_assignment": "var x = null;\n x ??= 'foo';",
    "object_initializer": "var obj = {'foo': 'bar'};",
    "object_initializer.computed_property_names": "const key = 'foo'; const obj = {[key]: 'bar'}",
    "object_initializer.shorthand_method_names": "const obj = { method() {} }",
    "object_initializer.shorthand_property_names": "const a = 1; const obj = {a}",
    "object_initializer.spread_properties": "const obj = {...{a: 1}}",
    "optional_chaining": "var obj = {'foo': {'bar': 'baz'}};\nvar x = obj.oof?.bar;",
    "property_accessors": "var obj = {'foo': 'bar'};\nvar x = obj['foo'];",
    "remainder": "var x = 5 % 3;",
    "remainder_assignment": "var x = 5;\nx %= 3;",
    "right_shift": "var x = 5 >> 2;",
    "right_shift_assignment": "var x = 5;\n x >>= 2;",
    "spread": "var x = [1, 2, [3, 4, 5]];\nvar y = [x[0], x[1], ...x[2]];",
    "spread.spread_in_arrays": "[...[1, 2, 3]]",
    "spread.spread_in_function_calls": "Math.max(...[1, 2, 3])",
    "spread.spread_in_object_literals": "const obj = {...{a: 1}}",
    "strict_equality": "true === true;",
    "strict_inequality": "false !== null;",
    "subtraction": "var x = 1 - 1;",
    "subtraction_assignment": "var x = 2;\nx -= 1;",
    "super": "class Foo {\n  constructor(name) {\n    this.name = name;\n  }\n}\nclass FooBar extends Foo {\n  constructor(name) {\n    super(name);\n  }\n}\nvar firstFooBar = new FooBar('foo');",
    "this": "function getThis() {\n  return this;\n}\ngetThis();",
    "typeof": "typeof 'foo' == 'string';",
    "unary_negation": "var x = 4;\nvar y = -x;",
    "unary_plus": "var x = +true;",
    "unsigned_right_shift": "var x = 5 >>> 2;",
    "unsigned_right_shift_assignment": "var x = 5;\n x >>>= 2;",
    "void": "void function test() {\n  console.log('test function executed');\n};",
    "yield": "function* foo() {\n  yield 'a'\n};",
    "yield_star": "function* foo() {\n  yield 'a'\n};\nfunction* bar() {\n  yield* foo()\n};"
  },
  "regular_expressions": {
    "backreference": "/(b)\\1/i",
    "capturing_group": "/(b)/i",
    "character_class": "/[abc]/i",
    "character_class_escape": "/\\d/i",
    "character_escape": "/\\n/i",
    "character_escape.unicode": "/\\u0041/",
    "disjunction": "/foo|bar/i",
    "input_boundary_assertion": "/^foo$/i",
    "literal_character": "/foo/i",
    "lookahead_assertion": "/(?!foobar)/i",
    "lookbehind_assertion": "/(?<!foobar)/i",
    "modifier": "/a/i",
    "named_backreference": "/\\k<foo>/i",
    "named_capturing_group": "/(?<foo>bar)/i",
    "non_capturing_group": "/(?:bar)/i",
    "quantifier": "/a*/i",
    "unicode_character_class_escape": "/\\p{Emoji_Presentation}/iu",
    "wildcard": "/./i",
    "word_boundary_assertion": "/foo\\bbar/i"
  },
  "statements": {
    "async_function": "async function foo() {};",
    "async_generator_function": "async function* foo() {};",
    "await_using": "async function foo() {\n  await using x = {\n    async [Symbol.asyncDispose]() {}\n  }\n};\nfoo();",
    "block": "if (true) {};",
    "break": "var i = 0;\nwhile (i < 6) {\n  i += 1;\n  if (i == 3) {\n    break;\n  }\n}",
    "class": "const Rectangle = class {};",
    "const": "const x = 1;",
    "continue": "for (var x = 1; x < 3; x++) {\n  continue;\n}",
    "do_while": "var i = 0;\ndo {} while (i++ < 5);",
    "empty": "var arr = [1, 2, 3];\n for (let i = 0; i < arr.length; arr[i++] = 0) /* empty statement */ ;",
    "for": "for (var x = 1; x < 3; x++) {}",
    "for_await_of": "async function* gen() { yield 1; } async function test() { for await (const x of gen()) {} }",
    "for_in": "var object = { a: 1, b: 2, c: 3 };\nfor (var property in object) {}",
    "for_of": "var arr = ['a', 'b', 'c'];\nfor (var element of arr) {}",
    "for_of.async_iterators": "const obj = {\n  async *[Symbol.asyncIterator]() {\n    yield 1;\n  }\n};\nif (typeof Symbol.asyncIterator === 'undefined') throw new Error('Unsupported');",
    "for_of.closing_iterators": "let closed = false;\nconst iter: Iterable<number, number, void> = {\n  [Symbol.iterator]() {\n    return {\n      next() {\n        return {done: false, value: 1};\n      },\n      return() {\n        closed = true;\n        return {done: true, value: 1};\n      },\n    };\n  },\n};\nfor (const x of iter) {\n  break;\n}\nif (!closed) throw new Error('Unsupported - iterator not closed properly');",
    "function": "function foo() {};",
    "function.trailing_comma_in_parameters": "function foo(a,) {}",
    "generator_function": "function* foo() {};",
    "generator_function.IteratorResult_object": "function* gen() {\n  yield 1;\n}\nconst result = gen().next();\nif (!result.hasOwnProperty('value') || !result.hasOwnProperty('done')) {\n  throw new Error('Unsupported - IteratorResult object missing properties');\n}",
    "if_else": "if (true) {} else {};",
    "generator_function.not_constructable_with_new": "function* gen() {\n  yield 1;\n}\ntry {\n  new gen();\n} catch (e) {\n  if (e.type === 'TypeError') {\n    return true;\n  }\n  throw e;\n}",
    "generator_function.trailing_comma_in_parameters": "function* gen(a,) { yield 1; }",
    "label": "label: for (;;) { break label; }",
    "let": "let x = 1;",
    "return": "/* Return statement automatically generated below */",
    "switch": "switch (1) {\n  case 1:\n    break;\n};",
    "throw": "try {\n  throw new Error('Testing!');\n} catch (e) {\n  if (e.message == 'Testing!') {\n    return true;\n  }\n  throw e;\n}",
    "try_catch": "/* This function is already wrapped in a try-catch */",
    "try_catch.optional_catch_binding": "try {} catch {}",
    "using": "function* g() { using x = true };",
    "var": "var x = 1;",
    "while": "var i = 0;\nwhile (i < 3) {\n  i += 1;\n}",
    "with": "with ([1, 2, 3]) {}"
  }
}
